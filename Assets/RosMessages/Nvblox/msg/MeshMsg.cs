//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Nvblox
{
    [Serializable]
    public class MeshMsg : Message
    {
        public const string k_RosMessageName = "nvblox_msgs/Mesh";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        //  Block origins and block sizes must match.
        //  Block size is the physical size (in meters) of a block of the mesh.
        public float block_size;
        //  Block indices are the 3D indices of the blocks; to get the origin of the
        //  block, simply multiply its index by the block size.
        //  Note that we consider a block's origin to be the low-side corner of
        //  the low-side voxel.
        public Index3DMsg[] block_indices;
        //  Blocks contains the actual mesh within the block, including triangles,
        //  vertex positions, and vertex colors.
        public MeshBlockMsg[] blocks;
        //  Whether to clear the entire previous map. This is set to true when
        //  the *entire* map rather than only the pieces that changed are published.
        public bool clear;

        public MeshMsg()
        {
            this.header = new Std.HeaderMsg();
            this.block_size = 0.0f;
            this.block_indices = new Index3DMsg[0];
            this.blocks = new MeshBlockMsg[0];
            this.clear = false;
        }

        public MeshMsg(Std.HeaderMsg header, float block_size, Index3DMsg[] block_indices, MeshBlockMsg[] blocks, bool clear)
        {
            this.header = header;
            this.block_size = block_size;
            this.block_indices = block_indices;
            this.blocks = blocks;
            this.clear = clear;
        }

        public static MeshMsg Deserialize(MessageDeserializer deserializer) => new MeshMsg(deserializer);

        private MeshMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.block_size);
            deserializer.Read(out this.block_indices, Index3DMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.blocks, MeshBlockMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.clear);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.block_size);
            serializer.WriteLength(this.block_indices);
            serializer.Write(this.block_indices);
            serializer.WriteLength(this.blocks);
            serializer.Write(this.blocks);
            serializer.Write(this.clear);
        }

        public override string ToString()
        {
            return "MeshMsg: " +
            "\nheader: " + header.ToString() +
            "\nblock_size: " + block_size.ToString() +
            "\nblock_indices: " + System.String.Join(", ", block_indices.ToList()) +
            "\nblocks: " + System.String.Join(", ", blocks.ToList()) +
            "\nclear: " + clear.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
