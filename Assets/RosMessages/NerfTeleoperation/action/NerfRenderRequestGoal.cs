//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.NerfTeleoperation
{
    [Serializable]
    public class NerfRenderRequestGoal : Message
    {
        public const string k_RosMessageName = "nerf_teleoperation_msgs/NerfRenderRequest";
        public override string RosMessageName => k_RosMessageName;

        //  Goal
        public short width;
        public short height;
        public byte mode;
        public float resolution;
        public float fov_factor;
        public float focal_length_x;
        public float focal_length_y;
        public float principal_point_x;
        public float principal_point_y;
        public float k1;
        public float k2;
        public float p1;
        public float p2;
        public float box_size;
        public Geometry.PoseMsg pose;
        public string frame_id;
        public int client_id;

        public NerfRenderRequestGoal()
        {
            this.width = 0;
            this.height = 0;
            this.mode = 0;
            this.resolution = 0.0f;
            this.fov_factor = 0.0f;
            this.focal_length_x = 0.0f;
            this.focal_length_y = 0.0f;
            this.principal_point_x = 0.0f;
            this.principal_point_y = 0.0f;
            this.k1 = 0.0f;
            this.k2 = 0.0f;
            this.p1 = 0.0f;
            this.p2 = 0.0f;
            this.box_size = 0.0f;
            this.pose = new Geometry.PoseMsg();
            this.frame_id = "";
            this.client_id = 0;
        }

        public NerfRenderRequestGoal(short width, short height, byte mode, float resolution, float fov_factor, float focal_length_x, float focal_length_y, float principal_point_x, float principal_point_y, float k1, float k2, float p1, float p2, float box_size, Geometry.PoseMsg pose, string frame_id, int client_id)
        {
            this.width = width;
            this.height = height;
            this.mode = mode;
            this.resolution = resolution;
            this.fov_factor = fov_factor;
            this.focal_length_x = focal_length_x;
            this.focal_length_y = focal_length_y;
            this.principal_point_x = principal_point_x;
            this.principal_point_y = principal_point_y;
            this.k1 = k1;
            this.k2 = k2;
            this.p1 = p1;
            this.p2 = p2;
            this.box_size = box_size;
            this.pose = pose;
            this.frame_id = frame_id;
            this.client_id = client_id;
        }

        public static NerfRenderRequestGoal Deserialize(MessageDeserializer deserializer) => new NerfRenderRequestGoal(deserializer);

        private NerfRenderRequestGoal(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.width);
            deserializer.Read(out this.height);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.resolution);
            deserializer.Read(out this.fov_factor);
            deserializer.Read(out this.focal_length_x);
            deserializer.Read(out this.focal_length_y);
            deserializer.Read(out this.principal_point_x);
            deserializer.Read(out this.principal_point_y);
            deserializer.Read(out this.k1);
            deserializer.Read(out this.k2);
            deserializer.Read(out this.p1);
            deserializer.Read(out this.p2);
            deserializer.Read(out this.box_size);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.frame_id);
            deserializer.Read(out this.client_id);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.width);
            serializer.Write(this.height);
            serializer.Write(this.mode);
            serializer.Write(this.resolution);
            serializer.Write(this.fov_factor);
            serializer.Write(this.focal_length_x);
            serializer.Write(this.focal_length_y);
            serializer.Write(this.principal_point_x);
            serializer.Write(this.principal_point_y);
            serializer.Write(this.k1);
            serializer.Write(this.k2);
            serializer.Write(this.p1);
            serializer.Write(this.p2);
            serializer.Write(this.box_size);
            serializer.Write(this.pose);
            serializer.Write(this.frame_id);
            serializer.Write(this.client_id);
        }

        public override string ToString()
        {
            return "NerfRenderRequestGoal: " +
            "\nwidth: " + width.ToString() +
            "\nheight: " + height.ToString() +
            "\nmode: " + mode.ToString() +
            "\nresolution: " + resolution.ToString() +
            "\nfov_factor: " + fov_factor.ToString() +
            "\nfocal_length_x: " + focal_length_x.ToString() +
            "\nfocal_length_y: " + focal_length_y.ToString() +
            "\nprincipal_point_x: " + principal_point_x.ToString() +
            "\nprincipal_point_y: " + principal_point_y.ToString() +
            "\nk1: " + k1.ToString() +
            "\nk2: " + k2.ToString() +
            "\np1: " + p1.ToString() +
            "\np2: " + p2.ToString() +
            "\nbox_size: " + box_size.ToString() +
            "\npose: " + pose.ToString() +
            "\nframe_id: " + frame_id.ToString() +
            "\nclient_id: " + client_id.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
